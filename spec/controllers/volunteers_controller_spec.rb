require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VolunteersController do
  render_views

  # This should return the minimal set of attributes required to create a valid
  # Volunteer. As you add validations to Volunteer, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :user_id => 1
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VolunteersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  login_admin

  describe "GET index" do
    it "assigns all volunteers as @volunteers" do
      volunteer = FactoryGirl.create :volunteer
      get :index, {}
      assigns(:volunteers).should eq([volunteer])
    end
  end

  describe 'POST create' do
    describe "with valid params" do
      it "creates a new Volunteer" do
        expect {
          post :create, {:volunteer => valid_attributes.merge(:user_id => User.first.id)}
        }.to change(Volunteer, :count).by(1)
      end

      it "assigns a newly created volunteer as @volunteer" do
        post :create, {:volunteer => valid_attributes.merge(:user_id => User.first.id)}
        assigns(:volunteer).should be_a(Volunteer)
        assigns(:volunteer).should be_persisted
      end

      it "redirects to the volunteer user" do
        post :create, {:volunteer => valid_attributes.merge(:user_id => User.first.id)}
        response.should redirect_to user_path(assigns(:volunteer).user_id)
      end
    end
    
    describe "with invalid params" do
      it "assigns a newly created but unsaved volunteer as @volunteer" do
        # Trigger the behavior that occurs when invalid params are submitted
        Volunteer.any_instance.stub(:save).and_return(false)
        post :create, {:volunteer => {}}
        assigns(:volunteer).should be_a_new(Volunteer)
      end

      it "redirects to users path" do
        # Trigger the behavior that occurs when invalid params are submitted
        Volunteer.any_instance.stub(:save).and_return(false)
        post :create, {:volunteer => {}}
        response.should redirect_to users_path
      end
    end
  end

  describe "DELETE destroy" do
    before :each do
      @volunteer = FactoryGirl.create :volunteer
    end

    it "destroys the requested volunteer" do
      expect {
        delete :destroy, :id => @volunteer.id
      }.to change(Volunteer, :count).by(-1)
    end

    it 'should not destroy the user' do
      expect {
        delete :destroy, :id => @volunteer.id
      }.to change(User, :count).by(0)
    end

    it "redirects to the volunteers list" do
      delete :destroy, :id => @volunteer.id
      response.should redirect_to(user_path(@volunteer.user))
    end
  end

end
